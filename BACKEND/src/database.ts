import { Pool } from "pg";
import dotenv from "dotenv";

dotenv.config();

// Verificar se as vari√°veis de ambiente est√£o carregadas corretamente
console.log("üîç Verificando credenciais do PostgreSQL:");
console.log("PG_HOST:", process.env.PG_HOST);
console.log("PG_USER:", process.env.PG_USER);
console.log("PG_PASSWORD:", typeof process.env.PG_PASSWORD === "string" ? "medeiros327790" : "N√£o definido ou inv√°lido");
console.log("PG_DATABASE:", process.env.PG_DATABASE);
console.log("PG_PORT:", process.env.PG_PORT);

// Configura√ß√£o segura do Pool de conex√£o
const pool = new Pool({
  host: process.env.PG_HOST || "localhost",
  user: process.env.PG_USER || "postgres",
  password: process.env.PG_PASSWORD ? String(process.env.PG_PASSWORD) : "medeiros327790", // Converte para string para evitar erros
  database: process.env.PG_DATABASE || "foodflow",
  port: Number(process.env.PG_PORT) || 5432,
  max: 10, // N√∫mero m√°ximo de conex√µes no pool
  idleTimeoutMillis: 30000, // Tempo antes de uma conex√£o inativa ser fechada
  connectionTimeoutMillis: 2000 // Tempo m√°ximo para tentar uma nova conex√£o
});

// Testar a conex√£o com o banco
pool.connect()
  .then(client => {
    console.log("‚úÖ Conectado ao PostgreSQL!");
    client.release(); // Liberar a conex√£o ap√≥s teste bem-sucedido
  })
  .catch(error => {
    console.error("‚ùå Erro ao conectar ao PostgreSQL:", error);
  });

export default pool;
